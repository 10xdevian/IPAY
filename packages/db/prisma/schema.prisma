datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  username  String   @unique
  password  String
  kyc       Kyc?
  wallet    Wallet?  @relation("UserWallet")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Merchant {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  business  String?
  wallet    Wallet?  @relation("MerchantWallet")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Kyc {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  documentId String
  status     String   @default("PENDING") // APPROVED / REJECTED / PENDING
  pinCode    String // 4 digit PIN for secure payments
  createdAt  DateTime @default(now())
}

model Wallet {
  id                   String              @id @default(uuid())
  balance              Float               @default(0)
  userId               String?             @unique
  merchantId           String?             @unique
  user                 User?               @relation("UserWallet", fields: [userId], references: [id])
  merchant             Merchant?           @relation("MerchantWallet", fields: [merchantId], references: [id])
  transactionsSent     WalletTransaction[] @relation("SenderTransactions")
  transactionsReceived WalletTransaction[] @relation("ReceiverTransactions")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  PaymentRequest       PaymentRequest[]
  PublicPaymentLink    PublicPaymentLink[]
  RefundRequest        RefundRequest[]
}

model WalletTransaction {
  id               String          @id @default(uuid())
  senderId         String
  receiverId       String
  sender           Wallet          @relation("SenderTransactions", fields: [senderId], references: [id])
  receiver         Wallet          @relation("ReceiverTransactions", fields: [receiverId], references: [id])
  amount           Float
  status           String          @default("PENDING") // SUCCESS / FAILED / REFUNDED / DISPUTED
  transactionType  String // CREDIT / DEBIT / REFUND / DISPUTE
  referenceId      String? // can link to PaymentRequest / RefundRequest
  createdAt        DateTime        @default(now())
  PaymentRequest   PaymentRequest? @relation(fields: [paymentRequestId], references: [id])
  paymentRequestId String?
  RefundRequest    RefundRequest[]
  Dispute          Dispute[]
}

model PaymentRequest {
  id          String              @id @default(uuid())
  requesterId String
  requester   Wallet              @relation(fields: [requesterId], references: [id])
  amount      Float
  reason      String?
  status      String              @default("PENDING") // PENDING / PAID / CANCELLED
  payments    WalletTransaction[]
  createdAt   DateTime            @default(now())
}

model PublicPaymentLink {
  id        String   @id @default(uuid())
  creatorId String
  creator   Wallet   @relation(fields: [creatorId], references: [id])
  amount    Float
  reason    String?
  urlSlug   String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model RefundRequest {
  id           String            @id @default(uuid())
  originalTxId String
  originalTx   WalletTransaction @relation(fields: [originalTxId], references: [id])
  requesterId  String
  requester    Wallet            @relation(fields: [requesterId], references: [id])
  status       String            @default("PENDING") // APPROVED / REJECTED / PENDING
  createdAt    DateTime          @default(now())
}

model Dispute {
  id            String            @id @default(uuid())
  transactionId String
  transaction   WalletTransaction @relation(fields: [transactionId], references: [id])
  reason        String
  status        String            @default("OPEN") // OPEN / RESOLVED / REJECTED
  createdAt     DateTime          @default(now())
}

model DummyBank {
  id         String   @id @default(uuid())
  userId     String?
  merchantId String?
  amount     Float
  type       String // DEPOSIT / WITHDRAWAL
  status     String   @default("PENDING") // SUCCESS / FAILED
  createdAt  DateTime @default(now())
}
